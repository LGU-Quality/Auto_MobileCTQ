import logging
import time
import os
import json
from appium import webdriver
from appium.options.android import UiAutomator2Options
from appium.options.ios import XCUITestOptions  # iOS ÏßÄÏõê Ï∂îÍ∞Ä
from statistics import mean
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from appium.webdriver.common.appiumby import AppiumBy

# APPIUM_SERVER_URL = "http://127.0.0.1:4723"

# Î°úÍπÖ ÏÑ§Ï†ï
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)

# ‚úÖ Locator Ï†ÑÎûµ Îß§Ìïë
LOCATOR_MAPPING = {
    # "ID": By.ID,
    "ID": AppiumBy.ID,
    "XPATH": By.XPATH,
    "ANDROID_UIAUTOMATOR": AppiumBy.ANDROID_UIAUTOMATOR,
    "IOS_PREDICATE": AppiumBy.IOS_PREDICATE,
    "ACCESSIBILITY_ID": AppiumBy.ACCESSIBILITY_ID,
    "CLASS_NAME" : By.CLASS_NAME,
    "DOM": "DOM"
}


def load_config():
    """config.jsonÏùÑ Î°úÎìúÌïòÏó¨ ÏÑ§Ï†ï Í∞íÏùÑ Í∞ÄÏ†∏Ïò¥"""
    config_path = os.path.join(os.path.dirname(__file__), "config.json")
    with open(config_path, "r", encoding="utf-8") as file:
        config = json.load(file)
    return config

config = load_config()


def quick_search(driver, xml_string, timeout=10, poll_interval=0.05):
    start_time = time.time()
    while time.time() - start_time < timeout:
        # ÌòÑÏû¨ ÌéòÏù¥ÏßÄÏùò XML ÏÜåÏä§ Í∞ÄÏ†∏Ïò§Í∏∞
        page_source = driver.page_source
        if xml_string in page_source:
            return True
        time.sleep(poll_interval)
    return False


def setup_driver(platform_name, app_package, app_activity, device_name):
    """Appium ÎìúÎùºÏù¥Î≤Ñ ÏÑ§Ï†ï (config.jsonÏùò Ìè¨Ìä∏ Î∞òÏòÅ)"""
    
    # üî• Appium ÏÑúÎ≤Ñ Ìè¨Ìä∏ ÏÑ§Ï†ï (Í∏∞Î≥∏Í∞í: 4723, config.jsonÏóêÏÑú Î≥ÄÍ≤Ω Í∞ÄÎä•)
    appium_host = config.get("appium_server", {}).get("host", "127.0.0.1")
    appium_port = config.get("appium_server", {}).get("port", 4723)
    # appium_server_url = f"http://{appium_host}:{appium_port}/wd/hub"
    appium_server_url = f"http://{appium_host}:{appium_port}"

    print(f"üöÄ Appium ÏÑúÎ≤Ñ Ïó∞Í≤∞: {appium_server_url}")

    if platform_name.lower() == "android":
        options = UiAutomator2Options()
        options.platform_name = platform_name
        options.device_name = device_name
        options.app_package = app_package
        options.app_activity = app_activity
        options.automation_name = "UiAutomator2"
        options.no_reset = True
    else:
        options = XCUITestOptions()
        options.platform_name = platform_name
        options.device_name = device_name
        options.bundle_id = app_package
        options.automation_name = "XCUITest"
        options.no_reset = True

    driver = webdriver.Remote(appium_server_url, options=options)
    return driver


def get_locator_strategy(element_info, platform_name):
    """
    ÏöîÏÜå Ï†ïÎ≥¥ÏóêÏÑú locator_strategyÏôÄ valueÎ•º Ï∂îÏ∂úÌïòÍ≥† Í∏∞Î≥∏Í∞íÏùÑ ÏÑ§Ï†ï
    """
    platform_key = platform_name.lower()
    default_strategy = By.XPATH  # Í∏∞Î≥∏Í∞íÏùÑ XPATHÎ°ú ÏÑ§Ï†ï

    if not element_info:
        raise ValueError("‚ùå ÏöîÏÜå Ï†ïÎ≥¥Í∞Ä Ïú†Ìö®ÌïòÏßÄ ÏïäÏäµÎãàÎã§.")

    locator_strategy = element_info.get("locator_strategy", {}).get(platform_key, "XPATH")
    locator_value = element_info.get("value", {}).get(platform_key, None)

    if not locator_value:
        raise ValueError(f"‚ùå '{platform_key}'Ïóê ÎåÄÌïú locator Í∞íÏù¥ ÏóÜÏäµÎãàÎã§!")

    return LOCATOR_MAPPING.get(locator_strategy, default_strategy), locator_value


""" measure_app_launch_time
- Ïï± Ïã§Ìñâ ÏãúÍ∞Ñ ÏÜçÎèÑ Ï∏°Ï†ï Ìï®Ïàò
- ÌïÑÏöî Config Î∞è ÎèôÏûë ÏàúÏÑú: 
0. Ïï± Ïã§Ìñâ
1. success_element Í∞Ä ÌÉêÏÉâÎêòÎäî Ï¶âÏãú Ï¢ÖÎ£å
"""
def measure_app_launch_time(app_package, app_activity, test_info, device_name, platform_name, wait_time=10, test_count=10, log_signal=None):
    """Ïï± Ïã§Ìñâ ÌõÑ ÌäπÏ†ï UIÍ∞Ä ÎÇòÌÉÄÎÇ† ÎïåÍπåÏßÄÏùò ÏãúÍ∞ÑÏùÑ Ï∏°Ï†ï"""
    
    driver = setup_driver(platform_name, app_package, app_activity, device_name)
    driver.implicitly_wait(0)  # Explicit waitÎßå ÏÇ¨Ïö©ÌïòÏó¨ ÎåÄÍ∏∞ ÏãúÍ∞Ñ ÏµúÏ†ÅÌôî

    launch_times = []

    try:
        for i in range(test_count):
            log_signal.emit(f"ÌÖåÏä§Ìä∏ {i + 1}/{test_count} ÏãúÏûë")

            driver.terminate_app(app_package)
            time.sleep(2)
            driver.activate_app(app_package)
            start_time = time.time()

            # ‚úÖ ÏöîÏÜå ÌÉêÏÉâ Ï†ÑÎûµ Í≤∞Ï†ï
            by_strategy, success_element = get_locator_strategy(test_info["success_element"], platform_name)

            if by_strategy == "DOM":
                element_found = quick_search(driver, success_element, timeout=wait_time, poll_interval=0.05)
                if not element_found: log_signal.emit(f"‚ùå ÏöîÏÜå ÌÉêÏÉâ Ïã§Ìå®")
            else:
                try:
                    WebDriverWait(driver, wait_time, poll_frequency=0.03).until(
                        EC.presence_of_element_located((by_strategy, success_element))
                    )
                except TimeoutException:
                    log_signal.emit(f"‚ùå ÏöîÏÜå ÌÉêÏÉâ Ïã§Ìå® ({by_strategy}): {success_element}")
                    continue

            end_time = time.time()
            launch_time = end_time - start_time
            launch_times.append(launch_time)

            log_signal.emit(f"‚úÖ Ïã§Ìñâ ÏãúÍ∞Ñ: {launch_time:.2f} Ï¥à")

            try:
                end_button_by, end_button_element = get_locator_strategy(test_info["end_button"], platform_name)
                action_elem = driver.find_element(end_button_by, end_button_element)
                action_elem.click()
            except Exception as e:
                log_signal.emit("‚ö†Ô∏è ÎßàÏßÄÎßâ ÏöîÏÜå ÌÅ¥Î¶≠ Ïã§Ìå®(ÌòπÏùÄ ÎØ∏ÏÑ§Ï†ï)")

            time.sleep(1)

    except Exception as e:
        print(e)

    finally:
        driver.quit()

    avg_time = sum(launch_times) / len(launch_times) if launch_times else 0
    return launch_times, avg_time


""" measure_screen_transition
- ÌôîÎ©¥ Ïù¥Îèô ÏãúÍ∞Ñ Ï∏°Ï†ï Ìï®Ïàò
- ÌïÑÏöî Config Î∞è ÎèôÏûë ÏàúÏÑú: 
0. Ïï± Ïã§Ìñâ
1. start_element ÎåÄÍ∏∞
2. action ÌÅ¥Î¶≠
3. end_element Í∞Ä ÌôïÏù∏ÎêòÎ©¥ Ï¢ÖÎ£å
4. [ÏòµÏÖò] end_buttonÏù¥ Ï†ïÏùòÎêòÏñ¥ ÏûàÏùÑ Í≤ΩÏö∞ end_button ÎàÑÎ•¥Í≥† Ï¢ÖÎ£å
"""
def measure_screen_transition(app_package, app_activity, test_info, device_name, platform_name, wait_time=10, test_count=10, log_signal=None):
    """ÌäπÏ†ï ÌôîÎ©¥(A)ÏóêÏÑú ÌôîÎ©¥(B)ÏúºÎ°ú Ïù¥ÎèôÌïòÎäî Îç∞ Í±∏Î¶¨Îäî ÏãúÍ∞ÑÏùÑ Ï∏°Ï†ï"""

    driver = setup_driver(platform_name, app_package, app_activity, device_name)
    driver.implicitly_wait(0)  # Explicit waitÎßå ÏÇ¨Ïö©ÌïòÏó¨ ÎåÄÍ∏∞ ÏãúÍ∞Ñ ÏµúÏ†ÅÌôî

    transition_times = []

    try:
        for i in range(test_count):
            log_signal.emit(f"ÌÖåÏä§Ìä∏ {i + 1}/{test_count} ÏãúÏûë")

            driver.terminate_app(app_package)
            time.sleep(2)
            driver.activate_app(app_package)

            start_by, start_element = get_locator_strategy(test_info["start_element"], platform_name)
            action_by, action_element = get_locator_strategy(test_info["action"], platform_name)
            end_by, end_element = get_locator_strategy(test_info["end_element"], platform_name)

            try:
                WebDriverWait(driver, wait_time).until(
                    EC.presence_of_element_located((start_by, start_element))
                )
            except TimeoutException:
                log_signal.emit("‚ùå ÏãúÏûë ÌôîÎ©¥ ÌÉêÏÉâ Ïã§Ìå®")
                continue

            try:
                action_elem = driver.find_element(action_by, action_element)
                action_elem.click()
                log_signal.emit("‚úÖ Î≤ÑÌäº ÌÅ¥Î¶≠ ÏôÑÎ£å, ÌôîÎ©¥ Ï†ÑÌôò ÏãúÏûë")
            except:
                log_signal.emit("‚ùå Î≤ÑÌäºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏùå")
                continue

            start_time = time.time()

            try:
                WebDriverWait(driver, wait_time, poll_frequency=0.1).until(
                    EC.presence_of_element_located((end_by, end_element))
                )
                end_time = time.time()
                transition_time = end_time - start_time
                transition_times.append(transition_time)
                log_signal.emit(f"‚úÖ ÌôîÎ©¥ Ï†ÑÌôò ÏôÑÎ£å: {transition_time:.2f} Ï¥à")
            except TimeoutException:
                log_signal.emit("‚ùå ÌôîÎ©¥ Ï†ÑÌôò Ïã§Ìå®")

            try:
                end_button_by, end_button_element = get_locator_strategy(test_info["end_button"], platform_name)
                action_elem = driver.find_element(end_button_by, end_button_element)
                action_elem.click()
            except Exception as e:
                log_signal.emit("‚ö†Ô∏è ÎßàÏßÄÎßâ ÏöîÏÜå ÌÅ¥Î¶≠ Ïã§Ìå®(ÌòπÏùÄ ÎØ∏ÏÑ§Ï†ï)")

            time.sleep(1)

    finally:
        driver.quit()

    avg_time = sum(transition_times) / len(transition_times) if transition_times else 0
    return transition_times, avg_time


""" measure_screen_transition_with_extraBtn
- ÌôîÎ©¥ Ïù¥Îèô ÏãúÍ∞Ñ Ï∏°Ï†ï Ìï®Ïàò_2
- ÌïÑÏöî Config Î∞è ÎèôÏûë ÏàúÏÑú: 
0. Ïï± Ïã§Ìñâ
1. {init_button} ÌÅ¥Î¶≠ <- Ìï¥Îãπ Î∂ÄÎ∂ÑÏù¥ Ï∂îÍ∞ÄÎê®
2. start_element ÎåÄÍ∏∞
3. action ÌÅ¥Î¶≠
4. {action2~3} ÌÅ¥Î¶≠ <- Ìï¥Îãπ Î∂ÄÎ∂ÑÏù¥ Ï∂îÍ∞ÄÎê®
5. end_element Í∞Ä ÌôïÏù∏ÎêòÎ©¥ Ï¢ÖÎ£å
6. [ÏòµÏÖò] end_buttonÏù¥ Ï†ïÏùòÎêòÏñ¥ ÏûàÏùÑ Í≤ΩÏö∞ end_button ÎàÑÎ•¥Í≥† Ï¢ÖÎ£å
"""
def measure_screen_transition_with_extraBtn(app_package, app_activity, test_info, device_name, platform_name, wait_time=10, test_count=10, log_signal=None):
    """ÌäπÏ†ï ÌôîÎ©¥(A)ÏóêÏÑú ÌôîÎ©¥(B)ÏúºÎ°ú Ïù¥ÎèôÌïòÎäî Îç∞ Í±∏Î¶¨Îäî ÏãúÍ∞ÑÏùÑ Ï∏°Ï†ï"""

    driver = setup_driver(platform_name, app_package, app_activity, device_name)
    driver.implicitly_wait(0)  # Explicit waitÎßå ÏÇ¨Ïö©ÌïòÏó¨ ÎåÄÍ∏∞ ÏãúÍ∞Ñ ÏµúÏ†ÅÌôî

    transition_times = []

    try:
        for i in range(test_count):
            log_signal.emit(f"ÌÖåÏä§Ìä∏ {i + 1}/{test_count} ÏãúÏûë")

            driver.terminate_app(app_package)
            time.sleep(2)
            driver.activate_app(app_package)

            init_btn_by, init_btn_element = get_locator_strategy(test_info["init_button"], platform_name)
            start_by, start_element = get_locator_strategy(test_info["start_element"], platform_name)
            action_by, action_element = get_locator_strategy(test_info["action"], platform_name)
            end_by, end_element = get_locator_strategy(test_info["end_element"], platform_name)

            try:
                init_btn = WebDriverWait(driver, wait_time).until(
                    EC.presence_of_element_located((init_btn_by, init_btn_element))
                )
                init_btn.click()
                log_signal.emit("‚úÖ Ï¥àÍ∏∞ Î≤ÑÌäº ÌÅ¥Î¶≠ ÏôÑÎ£å")
            except TimeoutException:
                log_signal.emit("‚ùå Ï¥àÍ∏∞ Î≤ÑÌäº ÌÉêÏÉâ Ïã§Ìå®")
                continue

            try:
                WebDriverWait(driver, wait_time).until(
                    EC.presence_of_element_located((start_by, start_element))
                )
            except TimeoutException:
                log_signal.emit("‚ùå ÏãúÏûë ÌôîÎ©¥ ÌÉêÏÉâ Ïã§Ìå®")
                continue

            try:
                action = driver.find_element(action_by, action_element)
                action.click()
            except:
                log_signal.emit("‚ùå Ïï°ÏÖò Î≤ÑÌäºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏùå")
                continue

            # üîπ action2 Ï°¥Ïû¨ÌïòÎäî Í≤ΩÏö∞ ÌÅ¥Î¶≠ ÏàòÌñâ
            if "action2" in test_info:
                try:
                    action2_by, action2_element = get_locator_strategy(test_info["action2"], platform_name)
                    log_signal.emit(f"üîç init_button2 ÌôïÏù∏: ({action2_by}, {action2_element})")
                    
                    action2 = WebDriverWait(driver, wait_time).until(
                        EC.element_to_be_clickable((action2_by, action2_element))
                    )
                    action2.click()
                    log_signal.emit("‚úÖ action2 ÌÅ¥Î¶≠ ÏôÑÎ£å")
                except TimeoutException:
                    log_signal.emit("‚ùå action2 ÏöîÏÜå ÌÉêÏÉâ Ïã§Ìå®")
                    continue

            # üîπ action3 Ï°¥Ïû¨ÌïòÎäî Í≤ΩÏö∞ ÌÅ¥Î¶≠ ÏàòÌñâ
            if "action3" in test_info:
                try:
                    action3_by, action3_element = get_locator_strategy(test_info["action3"], platform_name)
                    log_signal.emit(f"üîç action3 ÌôïÏù∏: ({action3_by}, {action3_element})")
                    
                    action3 = WebDriverWait(driver, wait_time).until(
                        EC.element_to_be_clickable((action3_by, action3_element))
                    )
                    action3.click()
                    log_signal.emit("‚úÖ action3 ÌÅ¥Î¶≠ ÏôÑÎ£å")
                except TimeoutException:
                    log_signal.emit("‚ùå action3 ÏöîÏÜå ÌÉêÏÉâ Ïã§Ìå®")
                    continue

            log_signal.emit("‚úÖ Î≤ÑÌäº ÌÅ¥Î¶≠ ÏôÑÎ£å, ÌôîÎ©¥ Ï†ÑÌôò ÏãúÏûë")
            start_time = time.time()

            try:
                WebDriverWait(driver, wait_time, poll_frequency=0.1).until(
                    EC.presence_of_element_located((end_by, end_element))
                )
                end_time = time.time()
                transition_time = end_time - start_time
                transition_times.append(transition_time)
                log_signal.emit(f"‚úÖ ÌôîÎ©¥ Ï†ÑÌôò ÏôÑÎ£å: {transition_time:.2f} Ï¥à")
            except TimeoutException:
                log_signal.emit("‚ùå ÌôîÎ©¥ Ï†ÑÌôò Ïã§Ìå®")

            try:
                end_button_by, end_button_element = get_locator_strategy(test_info["end_button"], platform_name)
                action_elem = driver.find_element(end_button_by, end_button_element)
                action_elem.click()
            except Exception as e:
                log_signal.emit("‚ö†Ô∏è ÎßàÏßÄÎßâ ÏöîÏÜå ÌÅ¥Î¶≠ Ïã§Ìå®(ÌòπÏùÄ ÎØ∏ÏÑ§Ï†ï)")

            time.sleep(1)

    finally:
        driver.quit()

    avg_time = sum(transition_times) / len(transition_times) if transition_times else 0
    return transition_times, avg_time


""" measure_search_time
- Text ÏûÖÎ†•Ïù¥ ÌïÑÏöîÌïú ÌôîÎ©¥ Ïù¥Îèô ÏãúÍ∞Ñ Ï∏°Ï†ï Ìï®Ïàò
- ÌïÑÏöî Config Î∞è ÎèôÏûë ÏàúÏÑú: 
0. Ïï± Ïã§Ìñâ
1. init_element ÎåÄÍ∏∞
2. init_button ÌÅ¥Î¶≠
3. [ÏòµÏÖò] init_button2 ÌÅ¥Î¶≠
4. input_field ÎåÄÍ∏∞
5. search_text Ï†ÑÏÜ°
6. search_button ÌÅ¥Î¶≠
7. end_element Í∞Ä ÌôïÏù∏ÎêòÎ©¥ Ï¢ÖÎ£å
8. [ÏòµÏÖò] end_buttonÏù¥ Ï†ïÏùòÎêòÏñ¥ ÏûàÏùÑ Í≤ΩÏö∞ end_button ÎàÑÎ•¥Í≥† Ï¢ÖÎ£å
"""
def measure_search_time(app_package, app_activity, test_info, device_name, platform_name, wait_time=10, test_count=10, log_signal=None):
    """Í≤ÄÏÉâÏñ¥ ÏûÖÎ†• ÌõÑ Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÎÇòÌÉÄÎÇ† ÎïåÍπåÏßÄÏùò ÏãúÍ∞ÑÏùÑ Ï∏°Ï†ï"""

    driver = setup_driver(platform_name, app_package, app_activity, device_name)
    driver.implicitly_wait(0)  # Explicit waitÎßå ÏÇ¨Ïö©ÌïòÏó¨ ÎåÄÍ∏∞ ÏãúÍ∞Ñ ÏµúÏ†ÅÌôî

    search_times = []

    try:
        for i in range(test_count):
            log_signal.emit(f"ÌÖåÏä§Ìä∏ {i + 1}/{test_count} ÏãúÏûë")

            driver.terminate_app(app_package)
            time.sleep(2)
            driver.activate_app(app_package)

            init_by, init_element = get_locator_strategy(test_info["init_element"], platform_name)
            init_btn_by, init_btn_element = get_locator_strategy(test_info["init_button"], platform_name)
            input_by, input_element = get_locator_strategy(test_info["input_field"], platform_name)
            search_by, search_element = get_locator_strategy(test_info["search_button"], platform_name)
            end_by, end_element = get_locator_strategy(test_info["end_element"], platform_name)

            try:
                WebDriverWait(driver, wait_time).until(
                    EC.presence_of_element_located((init_by, init_element))
                )
            except TimeoutException:
                log_signal.emit("‚ùå Ï¥àÍ∏∞ ÌôîÎ©¥ ÌÉêÏÉâ Ïã§Ìå®")
                continue    

            try:
                init_button = driver.find_element(init_btn_by, init_btn_element)
                init_button.click()

                # üîπ init_button2 Ï°¥Ïû¨ÌïòÎäî Í≤ΩÏö∞ ÌÅ¥Î¶≠ ÏàòÌñâ
                if "init_button2" in test_info:
                    try:
                        init_btn2_by, init_btn2_element = get_locator_strategy(test_info["init_button2"], platform_name)
                        log_signal.emit(f"üîç init_button2 ÌôïÏù∏: ({init_btn2_by}, {init_btn2_element})")
                        
                        init_button2 = WebDriverWait(driver, wait_time).until(
                            EC.element_to_be_clickable((init_btn2_by, init_btn2_element))
                        )
                        init_button2.click()
                        time.sleep(1)  # ÌÅ¥Î¶≠ ÌõÑ Ïû†Ïãú ÎåÄÍ∏∞
                        log_signal.emit("‚úÖ start_element_2 ÌÅ¥Î¶≠ ÏôÑÎ£å")
                    except TimeoutException:
                        log_signal.emit("‚ùå start_element_2 ÏöîÏÜå ÌÉêÏÉâ Ïã§Ìå® (Î¨¥ÏãúÌïòÍ≥† ÏßÑÌñâ)")
                        
                try:
                    search_input = WebDriverWait(driver, wait_time).until(
                        EC.presence_of_element_located((input_by, input_element))
                    )
                    search_input.clear()
                    search_input.send_keys(test_info["search_text"])
                    search_button = driver.find_element(search_by, search_element)
                    search_button.click()
                except Exception as e:
                    log_signal.emit(f"‚ùå input ÏöîÏÜå ÌÉêÏÉâ Ïã§Ìå®, {e}")
                
            except Exception as e:
                log_signal.emit(f"ÏóêÎü¨ Î∞úÏÉù: {e}")
                continue

            start_time = time.time()
            
            try:
                WebDriverWait(driver, wait_time, poll_frequency=0.1).until(
                    EC.presence_of_element_located((end_by, end_element))
                )
                end_time = time.time()
                search_time = end_time - start_time
                search_times.append(search_time)
                log_signal.emit(f"‚úÖ Í≤ÄÏÉâ ÏôÑÎ£å ÏãúÍ∞Ñ: {search_time:.2f} Ï¥à")
            except TimeoutException:
                log_signal.emit("‚ùå Í≤∞Í≥º ÏöîÏÜå ÌÉêÏÉâ Ïã§Ìå®")

            try:
                end_button_by, end_button_element = get_locator_strategy(test_info["end_button"], platform_name)
                action_elem = driver.find_element(end_button_by, end_button_element)
                action_elem.click()
            except Exception as e:
                log_signal.emit("‚ö†Ô∏è ÎßàÏßÄÎßâ ÏöîÏÜå ÌÅ¥Î¶≠ Ïã§Ìå®(ÌòπÏùÄ ÎØ∏ÏÑ§Ï†ï)")

            time.sleep(1)

    finally:
        driver.quit()

    avg_time = sum(search_times) / len(search_times) if search_times else 0
    return search_times, avg_time
